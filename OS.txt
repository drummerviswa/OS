#ODD or EVEN
echo "Enter a no: "
read num
rem=$(($num%2))
if [ $rem -eq 0 ]
then
 echo "$num is an even no"
else
 echo "$num is an odd no"
fi

#Fibonacci
echo "Enter the number of terms to generate: "
read term
a=0
b=1
x=2
echo "Fibonacci series for $term terms: "
echo "$a"
echo "$b"
while [ $x -lt $term ]
do
x=$(($x+1))
c=$(($a+$b))
echo "$c"
a=$b
b=$c
done

#Factorial
echo "Enter a num: "
read num
fact=1
while [ $num -gt 1 ]
do
fact=$((fact*num))
num=$((num-1))
done
echo "The factorial of the number is $fact"

#Palindrome
echo "Enter the string: "
read str
echo $str>temp
reverse="$(rev temp)"
if [ $str = $reverse ]
then
echo "The string is palindrome"
else
echo "The string is not a palindrome"
fi

#Using IF
hour="$(date +%H)"
if [ $hour -ge 0 -a $hour -lt 12 ]
then
echo "Good Morning"
elif [ $hour -ge 12 -a $hour -lt 18 ]
then 
echo "Good Afternoon"
elif [ $hour -ge 18 -a $hour -lt 20 ]
then
echo "Good Evening"
else
echo "Good Night"
fi

#using case
hour="$(date +%H)"
echo $hour
case $hour in
0[1-9]|1[0-2])
echo "Good Morning"
;;
1[3-6])
echo "Good Afternoon"
;;
1[7-9])
echo "Good Evening"
;;
*)
echo "Good Night"
esac

#Sum of Digits
echo "Enter num: "
read num
sum=0
while [ $num -gt 0 ]
do
rem=$(($num%10))
sum=$(($sum+rem))
num=$((num/10))
done
echo "Sum of the digits is $sum"


#FCFS without Arraival
#include <stdio.h>
int main(){
    int n, bt[20], wt[20], tat[20], avwt = 0, avtat = 0, i, j;
    printf("Enter total number of processes(maximum 20):");
    scanf("%d", &n);
    printf("\nEnter Process Burst Time\n");
    for (i = 0; i < n; i++){
        printf("P[%d]:", i + 1);
        scanf("%d", &bt[i]);
    }
    wt[0] = 0;
    for (i = 1; i < n; i++){
        wt[i] = 0;
        for (j = 0; j < i; j++)
            wt[i] += bt[j];
    }
    printf("\nProcess\t\tBurst Time\t\tWaiting Time\t\tTurnaround Time");
    for (i = 0; i < n; i++){
        tat[i] = bt[i] + wt[i]; // Turnaround Time = Burst time-waiting Time
        avwt += wt[i];
        avtat += tat[i];
        printf("\nP[%d]\t\t%d\t\t%d\t\t%d", i + 1, bt[i], wt[i], tat[i]);
    }
    avwt /= i;
    avtat /= i;
    printf("\n\nAverage Waiting Time:%d", avwt);
    printf("\nAverage Turnaround Time:%d", avtat);
    return 0;
}

#RR - Without Arraival
#include <stdio.h>
int main(){
    int i, limit, total = 0, x, counter = 0, time_quantum;
    int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10];
    float average_wait_time, average_turnaround_time;
    printf("\nEnter Total Number of Processes: ");
    scanf("%d", &limit);
    x = limit;
    for (i = 0; i < limit; i++){
        printf("\nEnter Details of Process[%d]", i + 1);
        printf("\nArrival Time:");
        scanf("%d", &arrival_time[i]);
        printf("\nBurst Time:");
        scanf("%d", &burst_time[i]);
        temp[i] = burst_time[i];
    }
    printf("\nEnter Time Quantum: ");
    scanf("%d", &time_quantum);
    printf("\nProcess ID\t\tBurst Time\t Turnaround Time\tWaiting Time: ");
    for (total = 0, i = 0; x != 0;){
        if (temp[i] <= time_quantum && temp[i] > 0){
            total = total + temp[i];
            temp[i] = 0;
            counter = 1;
        }
        else if (temp[i] > 0){
            temp[i] = temp[i] - time_quantum;
            total = total + time_quantum;
        }
        if (temp[i] == 0 && counter == 1){
            x--;
            printf("\n\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
            wait_time = wait_time + total - arrival_time[i] - burst_time[i];
            turnaround_time = turnaround_time + total - arrival_time[i];
            counter = 0;
        }
        if (i == limit - 1){
            i = 0;
        }
        else if (arrival_time[i + 1] <= total){
            i++;
        }
        else{
            i = 0;
        }
    }
    average_wait_time = wait_time * 1.0 / limit;
    average_turnaround_time = turnaround_time * 1.0 / limit;
    printf("\nAverage Waiting Time:\t%f", average_wait_time);
    printf("\n\nAverage Turnaround Time:\t%f\n", average_turnaround_time);
    return 0;
}

#SJF - Without Arraival
#include <stdio.h>
int main(){
    int A[100][4];
    int i, j, n, total = 0, index, temp;
    float avg_wt, avg_tat;
    printf("Enter number of process: ");
    scanf("%d", &n);
    printf("Enter Burst Time:\n");
    for (i = 0; i < n; i++){
        printf("P%d: ", i + 1);
        scanf("%d", &A[i][1]);
        A[i][0] = i + 1;
    }
    for (i = 0; i < n; i++){
        index = i;
        for (j = i + 1; j < n; j++)
            if (A[j][1] < A[index][1])
                index = j;
        temp = A[i][1];
        A[i][1] = A[index][1];
        A[index][1] = temp;
        temp = A[i][0];
        A[i][0] = A[index][0];
        A[index][0] = temp;
    }
    A[0][2] = 0;
    for (i = 1; i < n; i++){
        A[i][2] = 0;
        for (j = 0; j < i; j++)
            A[i][2] += A[j][1];
        total += A[i][2];
    }
    avg_wt = (float)total / n;
    total = 0;
    printf("P     BT     WT     TAT\n");
    for (i = 0; i < n; i++){
        A[i][3] = A[i][1] + A[i][2];
        total += A[i][3];
        printf("P%d     %d     %d      %d\n", A[i][0],
               A[i][1], A[i][2], A[i][3]);
    }
    avg_tat = (float)total / n;
    printf("Average Waiting Time= %f", avg_wt);
    printf("\nAverage Turnaround Time= %f", avg_tat);
}

#Priority - Without Arraival
#include <stdio.h>
void swap(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}
int main(){
    int n;
    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    int b[n], p[n], index[n];
    float avg_wt = 0, avg_tat = 0;
    for (int i = 0; i < n; i++){
        printf("Enter Burst Time and Priority Value for Process %d: ", i + 1);
        scanf("%d %d", &b[i], &p[i]);
        index[i] = i + 1;
    }
    for (int i = 0; i < n; i++){
        int a = p[i], m = i;
        for (int j = i; j < n; j++){
            if (p[j] > a){
                a = p[j];
                m = j;
            }
        }
        swap(&p[i], &p[m]);
        swap(&b[i], &b[m]);
        swap(&index[i], &index[m]);
    }
    int t = 0;
    printf("Order of process Execution is\n");
    for (int i = 0; i < n; i++){
        printf("P%d is executed from %d to %d\n", index[i], t, t + b[i]);
        t += b[i];
    }
    printf("\n");
    printf("Process Id     Burst Time   Wait Time    TurnAround Time\n");
    int wait_time = 0;
    for (int i = 0; i < n; i++){
        printf("P%d          %d          %d          %d\n", index[i], b[i], wait_time, wait_time + b[i]);
        avg_wt += wait_time;
        wait_time += b[i];
        avg_tat += wait_time + b[i];
    }
    avg_wt /= n;
    avg_tat /= n;
    printf("\n\nAverage Waiting Time: % f\n", avg_wt);
    printf("\nAvergae Turnaround Time: % f \n", avg_tat);
    return 0;
}

#Process Management
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/wait.h>
int main(){
    pid_t pid;
    int ret = 1;
    int status;
    pid = fork();
    if (pid == -1){
        printf("Cannot fork, Error occured\n");
        exit(EXIT_FAILURE);
    }
    else if (pid == 0){
        printf("child process, pid = %u\n", getpid());
        printf("parent of child process, pid = %u\n", getppid());
        char *argv_list[] = {"ls", "-lart", "/home", NULL};
        execv("ls", argv_list);
        exit(0);
    }
    else{
        printf("Parent Of parent process, pid = %u\n", getppid());
        printf("parent process, pid = %u\n", getpid());
        if (waitpid(pid, &status, 0) > 0){
            if (WIFEXITED(status) && !WEXITSTATUS(status))
                printf("program execution successful\n");
            else if (WIFEXITED(status) && WEXITSTATUS(status)){
                if (WEXITSTATUS(status) == 127){
                    printf("Execution failed\n");
                }
                else
                    printf("Program terminated normally, but returned a non-zero status\n");
            }
            else
                printf("Program didn't terminate normally\n");
        }
        else{
            printf("waitpid() failed\n");
        }
        exit(0);
    }
    return 0;
}

#Deadlock
#include <stdio.h>
int main(){
    int n, m, i, j, k;
    n = 5;    m = 3;
    int alloc[5][3] = {{0, 1, 0},{2, 0, 0},{3, 0, 2},{2, 1, 1},{0, 0, 2}};
    int max[5][3] = {{7, 5, 3},{3, 2, 2},{9, 0, 2},{2, 2, 2},{4, 3, 3}};
    int avail[3] = {3, 3, 2};
    int f[n], ans[n], ind = 0;
    for (k = 0; k < n; k++)
        f[k] = 0;
    int need[n][m];
    for (i = 0; i < n; i++){
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    }
    int y = 0;
    for (k = 0; k < 5; k++){
        for (i = 0; i < n; i++){
            if (f[i] == 0){
                int flag = 0;
                for (j = 0; j < m; j++){
                    if (need[i][j] > avail[j]){
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0){
                    ans[ind++] = i;
                    for (y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }
    printf("Following is the SAFE Sequence\n");
    for (i = 0; i < n - 1; i++)
        printf(" P%d ->", ans[i]);
    printf(" P%d", ans[n - 1]);
    return (0);
}

#Priority - With Arraival
#include<stdio.h>

void main()
{
    int n,i,j,temp,at[10],bt[10],p[10],wt[10],tat[10],pri[10],sum=0,tot=0;
    float avgwt,avgtat;
    printf("enter no of process:");
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
        printf("enter process no, arrival time, burst time, priority:");
        scanf("%d %d %d %d",&p[i],&at[i],&bt[i],&pri[i]);
    }
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(pri[i]<pri[j])
            {
               temp=at[i];
               at[i]=at[j];
               at[j]=temp;
               temp=bt[i];
               bt[i]=bt[j];
               bt[j]=temp;
               temp=p[i];
               p[i]=p[j];
               p[j]=temp;
               temp=pri[i];
               pri[i]=pri[j];
               pri[j]=temp;
            }
        }
    }
    wt[1]=0;
    tat[1]=bt[1];
    for(i=2;i<=n;i++)
    {
      wt[i]=tat[i-1];
      tat[i]=bt[i]+wt[i];
    }
    for(i=1;i<=n;i++)
    {
        sum=sum+wt[i];
        tot=tot+tat[i];
    }
    avgwt=sum/n;
    avgtat=tot/n;
    printf("proccess\tarrival_time\tburst_time\twaiting_time\tturnaround_time\tpriority\n");
    for(i=1;i<=n;i++)
    {
        printf("%d\t\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t\t%d\n",p[i],at[i],bt[i],wt[i],tat[i],pri[i]);
    }
    printf("average waiiting_time=%f\n average turnaround_time=%f\n",avgwt,avgtat);
}

#RR - With Arraival
#include<stdio.h>

void main()
{
    int n,i,x,count,j,temp,at[10],tan,w,tq,bt[10],p[10],btt[20],wt[10],pt[100],att[100],tat[10],sum=0,tot=0,k;
    float avgwt,avgtat;
    printf("enter no of process:");
    scanf("%d",&n);
    printf("enter time quantum:");
    scanf("%d",&tq);
    
    for(i=1;i<=n;i++)
    {
        printf("enter process no, arrival time, burst time:");
        scanf("%d %d %d",&p[i],&at[i],&bt[i]);
    }
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(at[i]<at[j])
            {
               temp=at[i];
               at[i]=at[j];
               at[j]=temp;
               temp=bt[i];
               bt[i]=bt[j];
               bt[j]=temp;
               temp=p[i];
               p[i]=p[j];
               p[j]=temp;
            }
        }
    }
    for(i=1;i<=n;i++)
    {
        btt[i]=bt[i];
    }
    x=1;
    for(i=n;i!=0;)
    {
        for(j=1;j<=n;j++)
        {
            if(btt[j]==0)
            {
                i--;
               break;
            }
            else if(btt[j]>=tq)
            {
                pt[x]=j;
                btt[j]=btt[j]-tq;
                att[x]=tq; 
                x++;
            }
            else if(btt[j]>0&&btt[j]<tq)
            {
                pt[x]=j;
                att[x]=btt[j];
                btt[j]=0;
                x++;
                
            }
        }
    }
    for(i=1;i<=n;i++)
    {
        w=0;
        for(j=x-1;j>0;j--)
        {
            if(pt[j]==i)
            {
             for(k=1;k<=j;k++)
             {
                w=w+att[k];
             }
             break;
            }
        }
        tat[i]=w-at[i];
        wt[i]=tat[i]-bt[i];
    }
    
  
    for(i=1;i<=n;i++)
    {
        sum=sum+wt[i];
        tot=tot+tat[i];
    }
    avgwt=sum/n;
    avgtat=tot/n;
    printf("proccess\tarrival_time\tburst_time\twaiting_time\tturnaround_time\n");
    for(i=1;i<=n;i++)
    {
        printf("%d\t\t\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\n",p[i],at[i],bt[i],wt[i],tat[i]);
    }
    printf("average waiiting_time=%f\n average turnaround_time=%f\n",avgwt,avgtat);
}

#SJF - With Arraival
#include<stdio.h>
void main()
{
int n,i,j,temp,at[10],bt[10],p[10],wt[10],tat[10],tot=0,sum=0;
float avgwt,avgtat;
printf("enter no of process:");
scanf("%d",&n);
printf("enter the arrival and burst time for eacch process:\n");
for(i=1;i<=n;i++)
{
 printf("proccess no:");
 scanf("%d",&p[i]);
 printf("Arrival_time(P%d)",i);
 scanf("%d",&at[i]);
 printf("Burst_time(P%d)",i);
 scanf("%d",&bt[i]);
}
for(i=1;i<=n;i++)
{
   for(j=1;j<=n;j++)
   {
       if(bt[j]>bt[i])
       {
        temp=bt[j];
        bt[j]=bt[i];
        bt[i]=temp;
        temp=at[j];
        at[j]=at[i];
        at[i]=temp;
        temp=p[j];
        p[j]=p[i];
        p[i]=temp;
       }
   }
}
wt[1]=0;
tat[1]=bt[1];
for(i=2;i<=n;i++)
{
    wt[i]=tat[i-1];
    tat[i]=bt[i]+wt[i];
}
for(i=1;i<=n;i++)
{
    sum=sum+wt[i];
    tot=tot+tat[i];
}
avgwt=sum/n;
avgtat=tot/n;
printf("Process\tarrival time\tburst time\twaiting time\tturn around time\t\n");
for(i=1;i<=n;i++)
{
    printf("%d\t\t\t%d\t\t\t\t\t%d\t\t\t\t\t%d\t\t\t\t\t%d\n",p[i],at[i],bt[i],wt[i],tat[i]);
}
printf("average_waiting time=%f \n average_turn_around time=%f \n",avgwt,avgtat);
}

#FCFS - Arraival
#include <stdio.h>
#define n 20
void swap(int *a,int *b){
    int *x=a;
    a=b;
    b=x;
}
void main(){
    int num,i,j,at[n],wt[n],bt[n],tat[n],ct[n],avwt=0,avtat=0;
    printf("Enter the no.of process: ");
    scanf("%d",&num);
    printf("Enter Arraival time: \n");
    for(i=0;i<num;i++){
        printf("P[%d]: ",i);
        scanf("%d",&at[i]);
    }
    printf("Enter Burst time: \n");
    for(i=0;i<num;i++){
        printf("P[%d]: ",i);
        scanf("%d",&bt[i]);
        ct[i]=0;
    }
    for(i=0;i<num;i++){
        for(j=i+1;j<n;j++){
            if(at[i]>at[j]){
                swap(&at[i],&at[j]);
                swap(&bt[i],&bt[j]);
            }
        }
    }
    ct[0]=bt[0];
    for(i=1;i<num;i++)
        ct[i]=ct[i-1]+bt[i];
    for(i=0;i<num;i++){
        tat[i]=ct[i]-at[i];
        wt[i]=tat[i]-bt[i];
    }
    printf("Process\t\tArriaval\tBurst\t\tCT\t\tTAT\t\tWT\n");
    for(i=0;i<num;i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",i,at[i],bt[i],ct[i],tat[i],wt[i]);
    }
    for(i=0;i<num;i++){
        avwt+=wt[i];
        avtat+=tat[i];
    }
    avwt/=num;
    avtat/=num;
    printf("Average Waiting Time: %d\nAverage Turn Around Time: %d\n",avwt,avtat);
}